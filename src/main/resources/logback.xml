<configuration>

    <!-- It will print Logback's own errors to the console. -->
    <!-- <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener" /> -->

    <!-- ===================================================================== -->
    <!-- Property Definitions -->
    <!-- ===================================================================== -->

    <!-- Windows: C:\Users\<YourUsername>\.silmaril\logs\   -->
    <!-- macOS: /Users/<YourUsername>/.silmaril/logs/       -->
    <!-- linux: /home/<YourUsername>/.silmaril/logs/        -->
    <property name="SYSTEM_LOG_PATH" value="${user.home}/.silmaril/logs" />

    <!-- Windows: C:\Users\<YourUsername>\Documents\Silmaril\logs\  -->
    <!-- macOS: /Users/<YourUsername>/Documents/Silmaril/log/       -->
    <!-- linux: /home/<YourUsername>/Documents/Silmaril/log/        -->
    <property name="GAME_LOG_PATH" value="${user.home}/Documents/Silmaril/logs" />

    <!-- ===================================================================== -->
    <!-- Appender Definitions -->
    <!-- ===================================================================== -->

    <!-- Appender 1: Log to Console (STDOUT) -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- Defines the format of the log message -->
            <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{16} %X{profile:-GLOBAL} - %msg%n</pattern>
        </encoder>

        <!-- Add a filter to only allow INFO and higher to the console -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>

    <!-- Appender 2: Log to a Rolling File (FILE) -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${SYSTEM_LOG_PATH}/app.log</file>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{16} %X{profile:-GLOBAL} - %msg%n</pattern>
        </encoder>

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- Daily rollover, start a new file when size exceeds 50MB -->
            <fileNamePattern>${SYSTEM_LOG_PATH}/archived/silmaril.%d{yyyy-MM-dd}.%i.log.gz</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
            <maxHistory>5</maxHistory>
            <totalSizeCap>50MB</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!--  Appender 3: Sifting Appender for logging Gameplay -->
    <appender name="SIFTING_GAME_LOG" class="ch.qos.logback.classic.sift.SiftingAppender">

        <!-- This is the MDC key we will use to separate files. -->
        <discriminator>
            <key>profile</key>
            <defaultValue>default</defaultValue>
        </discriminator>

        <sift>
            <!-- This is a template for the appender that will be created for each unique profile. -->
            <!-- It rolls on date AND size -->
            <appender name="FILE-${profile}" class="ch.qos.logback.core.rolling.RollingFileAppender">

                <!-- Define the ACTIVE log file's name. We use the profile name to create a sub-directory. -->
                <file>${GAME_LOG_PATH}/${profile}.log</file>

                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

                    <!-- Define the pattern for archived files. -->
                    <fileNamePattern>${GAME_LOG_PATH}/${profile}-архив/%d{yyyy-MM-dd}-${profile}.%i.log</fileNamePattern>

                    <!-- Start a new file if the current one exceeds 50MB -->
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <maxFileSize>10MB</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>

                </rollingPolicy>
                <!-- No maxHistory. This files will never be deleted. -->
                <append>true</append>
                <encoder>
                    <!-- A simpler pattern for game events -->
                    <pattern>%msg%n</pattern>
                </encoder>
            </appender>
        </sift>
    </appender>


    <!-- ===================================================================== -->
    <!-- Async Appender Wrapper Definitions -->
    <!-- ===================================================================== -->

    <appender name="ASYNC_SIFTING_GAME_LOG" class="ch.qos.logback.classic.AsyncAppender">
        <!-- It simply references the real worker appender -->
        <appender-ref ref="SIFTING_GAME_LOG" />

        <!-- You can configure the queue size. Default is 256. -->
        <!-- <queueSize>256</queueSize> -->

        <!-- OPTIONAL: By default, if the queue is full, it drops TRACE, DEBUG, and INFO messages.
             Set to true to block the caller thread instead of dropping messages. -->
        <!-- <neverBlock>true</neverBlock> -->
    </appender>

    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- It simply references the real worker appender -->
        <appender-ref ref="FILE" />

        <!-- You can configure the queue size. Default is 256. -->
        <!-- <queueSize>256</queueSize> -->

        <!-- OPTIONAL: By default, if the queue is full, it drops TRACE, DEBUG, and INFO messages.
             Set to true to block the caller thread instead of dropping messages. -->
        <!-- <neverBlock>true</neverBlock> -->
    </appender>

    <!-- ===================================================================== -->
    <!-- Logger Definitions -->
    <!-- ===================================================================== -->

    <!-- A specific logger for capturing Gameplay -->
    <logger name="GameEvents" level="INFO" additivity="false">
        <appender-ref ref="ASYNC_SIFTING_GAME_LOG" />
    </logger>

    <!--
        Set the logging level for your specific application package.
        Set name to your application's root package name.
        Set the level to "DEBUG" to see debug messages from your app.
    -->
    <logger name="ru.adan.silmaril" level="DEBUG" additivity="false">
        <!-- Send this logger's output to both console and file -->
        <appender-ref ref="STDOUT" /> <!-- the STDOUT has a filter to only accept INFO, so DEBUG will be ignored -->
        <appender-ref ref="ASYNC_FILE" />
    </logger>

    <!--
      Set the logging level for Koin's internal logs.
      Set this to DEBUG when troubleshooting DI issues.
      Set it to INFO or WARN for normal production runs.
    -->
    <logger name="org.koin" level="INFO" additivity="false">
        <appender-ref ref="STDOUT" /> <!-- the STDOUT has a filter to only accept INFO, so DEBUG will be ignored -->
        <appender-ref ref="ASYNC_FILE" />
    </logger>

    <!--
        This is the root logger. It catches all logs from all libraries.
        Setting it to INFO keeps the output clean from excessive third-party library logs.
    -->
    <root level="INFO">
        <appender-ref ref="STDOUT" />
    </root>

</configuration>